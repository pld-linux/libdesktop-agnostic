--- libdesktop-agnostic-0.3.92/libdesktop-agnostic/config-bridge.vala.orig	2011-03-12 15:14:23.000000000 +0100
+++ libdesktop-agnostic-0.3.92/libdesktop-agnostic/config-bridge.vala	2024-12-23 12:07:56.628589489 +0100
@@ -322,7 +322,7 @@ namespace DesktopAgnostic.Config
       }
       else
       {
-        unowned ParamSpec[] properties;
+        ParamSpec[] properties;
         string props_str;
         properties = ((ObjectClass)(obj.get_type ().class_peek ())).list_properties ();
         props_str = "";
--- libdesktop-agnostic-0.3.92/libdesktop-agnostic/config-impl-gconf.vala.orig	2011-03-12 15:14:23.000000000 +0100
+++ libdesktop-agnostic-0.3.92/libdesktop-agnostic/config-impl-gconf.vala	2024-12-24 13:12:11.589636395 +0100
@@ -54,7 +54,7 @@ namespace DesktopAgnostic.Config
       Schema schema = this.schema;
 
       this.connection_id = 0;
-      this._notifiers = Datalist<SList<NotifyDelegate>> ();
+      this._notifiers = Datalist<unowned SList<NotifyDelegate>> ();
       base_path = schema.get_metadata_option (opt_prefix +
                                               "base_path").get_string ();
       this.schema_path = "/schemas%s/%s".printf (base_path, schema.app_name);
@@ -324,7 +324,7 @@ namespace DesktopAgnostic.Config
     }
 
     private GLib.ValueArray
-    slist_to_valuearray (SList<unowned GConf.Value> list, Type type) throws Error
+    slist_to_valuearray (SList<GConf.Value> list, Type type) throws Error
     {
       GLib.ValueArray arr = new GLib.ValueArray (list.length ());
       foreach (unowned GConf.Value gc_val in list)
--- libdesktop-agnostic-0.3.92/libdesktop-agnostic/config-notify-delegate.c.orig	2011-03-12 15:14:23.000000000 +0100
+++ libdesktop-agnostic-0.3.92/libdesktop-agnostic/config-notify-delegate.c	2024-12-27 16:43:29.492965924 +0100
@@ -20,7 +20,7 @@
  * Author : Mark Lee <libdesktop-agnostic@lazymalevolence.com>
  */
 
-#include <libdesktop-agnostic/config.h>
+#include <libdesktop-agnostic/desktop-agnostic-cfg.h>
 
 typedef struct _DesktopAgnosticConfigNotifyDelegate
 {
--- libdesktop-agnostic-0.3.92/libdesktop-agnostic/config-schema.vala.orig	2011-03-12 15:14:23.000000000 +0100
+++ libdesktop-agnostic-0.3.92/libdesktop-agnostic/config-schema.vala	2024-12-23 12:07:24.412097354 +0100
@@ -318,7 +318,7 @@ namespace DesktopAgnostic.Config
      * @param group the group name to search for keys associated with it
      * @return a list of zero or more keys
      */
-    public unowned List<unowned string>?
+    public unowned List<string>?
     get_keys (string group)
     {
       return this.keys.lookup (group);
@@ -332,7 +332,7 @@ namespace DesktopAgnostic.Config
     public bool
     exists (string group, string key)
     {
-      unowned List<unowned string> group_keys = this.keys.lookup (group);
+      unowned List<string> group_keys = this.keys.lookup (group);
       return group_keys != null &&
              group_keys.find_custom (key, (CompareFunc)strcmp) != null;
     }
--- libdesktop-agnostic-0.3.92/libdesktop-agnostic/config.vala.orig	2011-03-12 15:14:23.000000000 +0100
+++ libdesktop-agnostic-0.3.92/libdesktop-agnostic/config.vala	2024-12-24 14:01:28.503617417 +0100
@@ -22,7 +22,6 @@
 
 using DesktopAgnostic;
 
-[CCode (cheader_filename = "libdesktop-agnostic/config.h")]
 namespace DesktopAgnostic.Config
 {
   /**
--- libdesktop-agnostic-0.3.92/libdesktop-agnostic/desktop-entry.vala.orig	2011-03-12 15:14:23.000000000 +0100
+++ libdesktop-agnostic-0.3.92/libdesktop-agnostic/desktop-entry.vala	2024-12-24 14:00:48.893832002 +0100
@@ -22,7 +22,6 @@
 
 using DesktopAgnostic;
 
-[CCode (cheader_filename = "libdesktop-agnostic/fdo.h")]
 namespace DesktopAgnostic.FDO
 {
   /**
--- libdesktop-agnostic-0.3.92/libdesktop-agnostic/ui-icon-chooser-dialog.vala.orig	2011-03-12 15:14:23.000000000 +0100
+++ libdesktop-agnostic-0.3.92/libdesktop-agnostic/ui-icon-chooser-dialog.vala	2024-12-23 11:49:26.347937729 +0100
@@ -98,7 +98,7 @@ namespace DesktopAgnostic.UI
     {
       this.response.connect (this.on_response);
       this.title = _ ("Select Icon");
-      this.icon_name = STOCK_FIND;
+      this.icon_name = Gtk.Stock.FIND;
       this.set_default_size (375, 375);
       this.create_ui ();
     }
@@ -121,8 +121,8 @@ namespace DesktopAgnostic.UI
 
       this.on_icon_type_toggled ();
 
-      this.add_buttons (STOCK_CANCEL, ResponseType.CANCEL,
-                        STOCK_OK, ResponseType.OK);
+      this.add_buttons (Gtk.Stock.CANCEL, ResponseType.CANCEL,
+                        Gtk.Stock.OK, ResponseType.OK);
     }
 
     private void
@@ -165,7 +165,7 @@ namespace DesktopAgnostic.UI
       {
         TreeIter iter;
         Value val;
-        var store = this._viewer.model as ListStore;
+        var store = this._viewer.model as Gtk.ListStore;
         store.get_iter (out iter, p);
         store.get_value (iter, Column.DATA, out val);
 
@@ -205,11 +205,11 @@ namespace DesktopAgnostic.UI
       return viewer;
     }
 
-    private ListStore
+    private Gtk.ListStore
     create_model ()
     {
       // icon, name, data
-      return new ListStore (Column.COUNT,
+      return new Gtk.ListStore (Column.COUNT,
                             typeof (Gdk.Pixbuf),
                             typeof (string),
                             typeof (string),
@@ -291,12 +291,12 @@ namespace DesktopAgnostic.UI
     private void
     on_folder_changed (FileChooser chooser)
     {
-      unowned ListStore model;
+      unowned Gtk.ListStore model;
       string uri;
       VFS.File directory;
       SList<VFS.File> children;
 
-      model = this._file_viewer.model as ListStore;
+      model = this._file_viewer.model as Gtk.ListStore;
       model.clear ();
 
       uri = chooser.get_uri ();
@@ -342,11 +342,11 @@ namespace DesktopAgnostic.UI
     private void
     on_icon_context_changed (ComboBox box)
     {
-      unowned ListStore model;
+      unowned Gtk.ListStore model;
       unowned IconTheme icon_theme;
       List<string> icon_list;
 
-      model = this._themed_viewer.model as ListStore;
+      model = this._themed_viewer.model as Gtk.ListStore;
       model.clear ();
 
       icon_theme = IconTheme.get_default ();
--- libdesktop-agnostic-0.3.92/libdesktop-agnostic/ui-launcher-editor-dialog.vala.orig	2011-03-12 15:14:23.000000000 +0100
+++ libdesktop-agnostic-0.3.92/libdesktop-agnostic/ui-launcher-editor-dialog.vala	2024-12-23 11:55:08.169419257 +0100
@@ -113,8 +113,8 @@ namespace DesktopAgnostic.UI
       bool is_application = true;
 
       // Action bar
-      this.add_buttons (STOCK_CANCEL, ResponseType.CANCEL,
-                        STOCK_SAVE, ResponseType.APPLY);
+      this.add_buttons (Gtk.Stock.CANCEL, ResponseType.CANCEL,
+                        Gtk.Stock.SAVE, ResponseType.APPLY);
       this.set_default_response (ResponseType.CANCEL);
       this.response.connect (this.on_response);
 
@@ -133,7 +133,7 @@ namespace DesktopAgnostic.UI
       }
       else
       {
-        icon = STOCK_MISSING_IMAGE;
+        icon = Gtk.Stock.MISSING_IMAGE;
       }
       this._icon = new IconButton (icon);
       this._icon.icon_selected.connect (this.on_icon_changed);
@@ -219,7 +219,7 @@ namespace DesktopAgnostic.UI
       this._exec.changed.connect (this.on_exec_changed);
       exec_hbox.pack_start (this._exec, true);
       exec_button = new Button.with_mnemonic (_ ("_Browse..."));
-      exec_image = new Image.from_stock (STOCK_OPEN, IconSize.BUTTON);
+      exec_image = new Image.from_stock (Gtk.Stock.OPEN, IconSize.BUTTON);
       exec_button.set_image (exec_image);
       exec_button.clicked.connect (this.on_exec_browse);
       exec_hbox.pack_start (exec_button, false);
@@ -250,7 +250,7 @@ namespace DesktopAgnostic.UI
       // make sure widgets are properly set up
       on_type_changed (this._type_combo);
 
-      List<unowned Widget> focus_chain_list = new List<unowned Widget> ();
+      List<Widget> focus_chain_list = new List<Widget> ();
       focus_chain_list.append (this._type_combo);
       focus_chain_list.append (this._name);
       focus_chain_list.append (this._desc);
@@ -325,8 +325,8 @@ namespace DesktopAgnostic.UI
 
       dialog = new FileChooserDialog (title, this,
                                       FileChooserAction.OPEN,
-                                      STOCK_CANCEL, ResponseType.CANCEL,
-                                      STOCK_OK, ResponseType.OK);
+                                      Gtk.Stock.CANCEL, ResponseType.CANCEL,
+                                      Gtk.Stock.OK, ResponseType.OK);
       response = dialog.run ();
       if (response == ResponseType.OK)
       {
@@ -359,8 +359,8 @@ namespace DesktopAgnostic.UI
 
       dialog = new FileChooserDialog (_ ("Save As"), this,
                                       FileChooserAction.SAVE,
-                                      STOCK_CANCEL, ResponseType.CANCEL,
-                                      STOCK_SAVE_AS, ResponseType.ACCEPT);
+                                      Gtk.Stock.CANCEL, ResponseType.CANCEL,
+                                      Gtk.Stock.SAVE_AS, ResponseType.ACCEPT);
       response = dialog.run ();
       if (response == ResponseType.ACCEPT)
       {
--- libdesktop-agnostic-0.3.92/libdesktop-agnostic/vfs-file-impl-gio.vala.orig	2011-03-12 15:14:23.000000000 +0100
+++ libdesktop-agnostic-0.3.92/libdesktop-agnostic/vfs-file-impl-gio.vala	2024-12-24 13:00:15.620181801 +0100
@@ -64,10 +64,10 @@ namespace DesktopAgnostic.VFS
 
           try
           {
-            info = this._file.query_info (FILE_ATTRIBUTE_STANDARD_TYPE,
+            info = this._file.query_info (FileAttribute.STANDARD_TYPE,
                                           FileQueryInfoFlags.NOFOLLOW_SYMLINKS,
                                           null);
-            gft = (GLib.FileType)info.get_attribute_uint32 (FILE_ATTRIBUTE_STANDARD_TYPE);
+            gft = (GLib.FileType)info.get_attribute_uint32 (FileAttribute.STANDARD_TYPE);
             switch (gft)
             {
               case GLib.FileType.REGULAR:
@@ -112,20 +112,20 @@ namespace DesktopAgnostic.VFS
           {
             string attrs;
 
-            attrs = "%s,%s,%s".printf (FILE_ATTRIBUTE_ACCESS_CAN_READ,
-                                       FILE_ATTRIBUTE_ACCESS_CAN_WRITE,
-                                       FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE);
+            attrs = "%s,%s,%s".printf (FileAttribute.ACCESS_CAN_READ,
+                                       FileAttribute.ACCESS_CAN_WRITE,
+                                       FileAttribute.ACCESS_CAN_EXECUTE);
             info = this._file.query_info (attrs, FileQueryInfoFlags.NONE,
                                           null);
-            if (info.get_attribute_boolean (FILE_ATTRIBUTE_ACCESS_CAN_READ))
+            if (info.get_attribute_boolean (FileAttribute.ACCESS_CAN_READ))
             {
               flags |= AccessFlags.READ;
             }
-            if (info.get_attribute_boolean (FILE_ATTRIBUTE_ACCESS_CAN_WRITE))
+            if (info.get_attribute_boolean (FileAttribute.ACCESS_CAN_WRITE))
             {
               flags |= AccessFlags.WRITE;
             }
-            if (info.get_attribute_boolean (FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE))
+            if (info.get_attribute_boolean (FileAttribute.ACCESS_CAN_EXECUTE))
             {
               flags |= AccessFlags.EXECUTE;
             }
@@ -177,12 +177,16 @@ namespace DesktopAgnostic.VFS
     public override bool
     load_contents (out string contents, out size_t length) throws Error
     {
-      return this._file.load_contents (null, out contents, out length, null);
+      uint8[] temp;
+      bool ret = this._file.load_contents (null, out temp, null);
+      contents = (string)temp;
+      length = temp.length;
+      return ret;
     }
     public override bool
     replace_contents (string contents) throws Error
     {
-      return this._file.replace_contents (contents, contents.size (), null,
+      return this._file.replace_contents (contents.data, null,
                                           false, 0, null, null);
     }
     public override bool
@@ -203,7 +207,7 @@ namespace DesktopAgnostic.VFS
       FileInfo info;
 
       children = new SList<File> ();
-      enumerator = this._file.enumerate_children (FILE_ATTRIBUTE_STANDARD_NAME,
+      enumerator = this._file.enumerate_children (FileAttribute.STANDARD_NAME,
                                                   FileQueryInfoFlags.NONE,
                                                   null);
       while ((info = enumerator.next_file (null)) != null)
@@ -247,14 +251,14 @@ namespace DesktopAgnostic.VFS
 
     public override string get_mime_type () throws Error
     {
-      var fi = this._file.query_info (FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE,
+      var fi = this._file.query_info (FileAttribute.STANDARD_CONTENT_TYPE,
                                       0, null);
       return fi.get_content_type ();
     }
 
     public override string[] get_icon_names () throws Error
     {
-      var fi = this._file.query_info (FILE_ATTRIBUTE_STANDARD_ICON,
+      var fi = this._file.query_info (FileAttribute.STANDARD_ICON,
                                       0, null);
       GLib.Icon icon = fi.get_icon ();
       if (icon != null)
@@ -291,11 +295,11 @@ namespace DesktopAgnostic.VFS
     {
       try
       {
-        var fi = this._file.query_info (FILE_ATTRIBUTE_THUMBNAIL_PATH,
+        var fi = this._file.query_info (FileAttribute.THUMBNAIL_PATH,
                                         0, null);
-        if (fi.has_attribute (FILE_ATTRIBUTE_THUMBNAIL_PATH))
+        if (fi.has_attribute (FileAttribute.THUMBNAIL_PATH))
         {
-          return fi.get_attribute_byte_string (FILE_ATTRIBUTE_THUMBNAIL_PATH);
+          return fi.get_attribute_byte_string (FileAttribute.THUMBNAIL_PATH);
         }
       }
       catch (GLib.Error err)
--- libdesktop-agnostic-0.3.92/libdesktop-agnostic/vfs-file-monitor-impl-gio.vala.orig	2011-03-12 15:14:23.000000000 +0100
+++ libdesktop-agnostic-0.3.92/libdesktop-agnostic/vfs-file-monitor-impl-gio.vala	2024-12-24 07:24:21.912697139 +0100
@@ -45,7 +45,7 @@ namespace DesktopAgnostic.VFS
       {
         this.monitor = impl.monitor_file (FileMonitorFlags.NONE, null);
       }
-      this.monitor.changed += this.monitor_callback;
+      this.monitor.changed.connect(this.monitor_callback);
     }
     private void monitor_callback (GLib.FileMonitor monitor, GLib.File file,
                                    GLib.File? other,
--- libdesktop-agnostic-0.3.92/libdesktop-agnostic/vfs-trash-impl-gio.vala.orig	2011-03-12 15:14:23.000000000 +0100
+++ libdesktop-agnostic-0.3.92/libdesktop-agnostic/vfs-trash-impl-gio.vala	2024-12-24 07:25:03.925802868 +0100
@@ -36,7 +36,7 @@ namespace DesktopAgnostic.VFS
         critical ("trash is NULL!!!!");
       }
       this.monitor = this.trash.monitor ();
-      this.monitor.changed += this.on_trash_changed;
+      this.monitor.changed.connect(this.on_trash_changed);
       this._file_count = 0;
       this.update_file_count ();
     }
@@ -62,7 +62,7 @@ namespace DesktopAgnostic.VFS
     update_file_count ()
     {
       GLib.File dir = (GLib.File)this.trash.implementation;
-      dir.query_info_async (FILE_ATTRIBUTE_TRASH_ITEM_COUNT,
+      dir.query_info_async (FileAttribute.TRASH_ITEM_COUNT,
                             FileQueryInfoFlags.NONE,
                             Priority.DEFAULT,
                             null,
@@ -78,7 +78,7 @@ namespace DesktopAgnostic.VFS
       try
       {
         file_info = dir.query_info_async.end (res);
-        this._file_count = file_info.get_attribute_uint32 (FILE_ATTRIBUTE_TRASH_ITEM_COUNT);
+        this._file_count = file_info.get_attribute_uint32 (FileAttribute.TRASH_ITEM_COUNT);
         this.file_count_changed ();
       }
       catch (Error err)
@@ -95,8 +95,8 @@ namespace DesktopAgnostic.VFS
 
       try
       {
-        string attrs = FILE_ATTRIBUTE_STANDARD_NAME + "," +
-                       FILE_ATTRIBUTE_STANDARD_TYPE;
+        string attrs = FileAttribute.STANDARD_NAME + "," +
+                       FileAttribute.STANDARD_TYPE;
         files = dir.enumerate_children (attrs,
                                         FileQueryInfoFlags.NOFOLLOW_SYMLINKS,
                                         null);
--- libdesktop-agnostic-0.3.92/libdesktop-agnostic/vfs.vala.orig	2011-03-12 15:14:23.000000000 +0100
+++ libdesktop-agnostic-0.3.92/libdesktop-agnostic/vfs.vala	2024-12-24 13:30:57.133538800 +0100
@@ -20,7 +20,6 @@
  * Author : Mark Lee <libdesktop-agnostic@lazymalevolence.com>
  */
 
-[CCode (cheader_filename = "libdesktop-agnostic/vfs.h")]
 namespace DesktopAgnostic.VFS
 {
   public interface Implementation : Object
--- libdesktop-agnostic-0.3.92/libdesktop-agnostic/vfs-volume-impl-gio.vala.orig	2011-03-12 15:14:23.000000000 +0100
+++ libdesktop-agnostic-0.3.92/libdesktop-agnostic/vfs-volume-impl-gio.vala	2024-12-24 07:23:51.422862317 +0100
@@ -36,7 +36,7 @@ namespace DesktopAgnostic.VFS
     }
     public string name
     {
-      get
+      owned get
       {
         return this.vol.get_name ();
       }
@@ -142,7 +142,7 @@ namespace DesktopAgnostic.VFS
     {
       if (this._unmount_callback == null)
       {
-        unowned Mount? mount;
+        Mount? mount;
         this._unmount_callback = callback;
         mount = this.vol.get_mount ();
         if (mount != null)
@@ -217,10 +217,10 @@ namespace DesktopAgnostic.VFS
         VFS.Volume vol = this.create_volume (gvol);
         this._volumes.insert (gvol, vol);
       }
-      this.monitor.mount_added += this.on_mount_added;
-      this.monitor.mount_removed += this.on_mount_removed;
-      this.monitor.volume_added += this.on_volume_added;
-      this.monitor.volume_removed += this.on_volume_removed;
+      this.monitor.mount_added.connect(this.on_mount_added);
+      this.monitor.mount_removed.connect(this.on_mount_removed);
+      this.monitor.volume_added.connect(this.on_volume_added);
+      this.monitor.volume_removed.connect(this.on_volume_removed);
     }
     private VFS.Volume
     create_volume (GLib.Volume vol)
@@ -292,7 +292,7 @@ namespace DesktopAgnostic.VFS
         return (void*)this.monitor;
       }
     }
-    public List<VFS.Volume> volumes
+    public List<weak VFS.Volume> volumes
     {
       owned get
       {
--- libdesktop-agnostic-0.3.92/libdesktop-agnostic/vfs-volume.vala.orig	2011-03-12 15:14:23.000000000 +0100
+++ libdesktop-agnostic-0.3.92/libdesktop-agnostic/vfs-volume.vala	2024-12-23 14:15:34.533769722 +0100
@@ -36,7 +36,7 @@ namespace DesktopAgnostic.VFS
     /**
      * The name of the volume.
      */
-    public abstract string name { get; }
+    public abstract string name { owned get; }
     /**
      * Usually, the mount point of the volume.
      */
@@ -61,7 +61,7 @@ namespace DesktopAgnostic.VFS
   public interface VolumeMonitor : Object
   {
     public abstract void* implementation { get; }
-    public abstract List<Volume> volumes { owned get; }
+    public abstract List<weak Volume> volumes { owned get; }
     public abstract signal void volume_mounted (Volume volume);
     public abstract signal void volume_unmounted (Volume volume);
   }
--- libdesktop-agnostic-0.3.92/python/configmodule.c.orig	2011-03-12 15:14:23.000000000 +0100
+++ libdesktop-agnostic-0.3.92/python/configmodule.c	2024-12-27 16:44:05.902356306 +0100
@@ -21,7 +21,7 @@
 #include "build-config.h"
 #endif
 
-#include <libdesktop-agnostic/config.h>
+#include <libdesktop-agnostic/desktop-agnostic-cfg.h>
 
 #include <pygobject.h>
 
--- libdesktop-agnostic-0.3.92/tests/test-vfs-file-monitor.vala.orig	2011-03-12 15:14:23.000000000 +0100
+++ libdesktop-agnostic-0.3.92/tests/test-vfs-file-monitor.vala	2024-12-24 13:13:05.469344503 +0100
@@ -86,7 +86,7 @@ class TestFileMonitor
       unowned string path = args[1];
       file = VFS.file_new_for_path (path);
       monitor = file.monitor ();
-      monitor.changed += on_change;
+      monitor.changed.connect(on_change);
       MainLoop mainloop = new MainLoop (null, false);
       if (args.length == 3 && file.file_type == VFS.FileType.DIRECTORY)
       {
--- libdesktop-agnostic-0.3.92/tests/test-vfs-trash.vala.orig	2011-03-12 15:14:23.000000000 +0100
+++ libdesktop-agnostic-0.3.92/tests/test-vfs-trash.vala	2024-12-24 13:13:28.469219902 +0100
@@ -36,7 +36,7 @@ public class TestTrash
     {
       VFS.init ();
       unowned VFS.Trash t = VFS.trash_get_default ();
-      t.file_count_changed += on_file_count_changed;
+      t.file_count_changed.connect(on_file_count_changed);
       mainloop = new MainLoop (null, true);
       mainloop.run ();
       VFS.shutdown ();
